[[http://imgs.xkcd.com/comics/haskell.png]]

* Hello World

一切从hello开始，说好的用Haskell实现，先来看Haskell写一个hello world +有多麻烦+

#+INCLUDE: "./src/hello.hs" src haskell

module 可以稍后介绍，其中
- =import System.Environment= 可以将 =getArgs= 引进来
- =do= 后面是一个块，就是一坨坨表达式，更重要的是还可以在do 里面用这样的 =value <- monad= 的玩意。如果写过scala，跟 for 是一样一样的。
- =getArgs= 类型为 =IO[String]=, 意思是 IO Monad 中有个 [String] 类型的值
- =<-= 相当于取出来 IO 中的 [String], 所以 args 现在是 [String]
- 双叹号 =!!= 是 List 的取 index 操作，这里则是取 args 第一个 String
- =++= 号就是 concat, 用于连接两个 List
- 注意 do 里面只允许一种 Monad，这里面则只允许 IO Monad

#+BEGIN_QUOTE
原因是 do 只是 ~>>=~ (aka =flatMap=) 和 ~>>~ 的语法糖，flatmap 永远应该返回同样类型的 Monad

#+BEGIN_SRC haskell
getArgs >>= (\args -> putStrLn ("Hello, " ++ args !! 0))
#+END_SRC
#+END_QUOTE

现在我们跑一些这个 =hello.hs=, 过程跟 gcc 差不多
#+BEGIN_EXAMPLE
❯ ghc hello.hs -o hello
[1 of 1] Compiling Main             ( hello.hs, hello.o )
Linking hello ...
hello ⏎
❯ ./hello jichao
Hello, jichao
#+END_EXAMPLE

* 操作符
前面出现了好些操作符，比如 =++= =!!= ，当它们堆叠到一起如果没有括号，很难分辨哪些表达式会先求值，所以先让我们熟悉一下常见的操作符，都有哪些结合律，以及优先级顺序
| 操作符                            | 优先级 | 结合律 | 什么鬼                                           |
|-----------------------------------+--------+--------+--------------------------------------------------|
| .                                 |      9 | 右     | 函数组合，比如 flat . map 就是 先map，结果再flat |
| !!                                |      9 | 左     | 取 List index 上的值 =[1,2] !! 0 -- > 1=         |
| ^,^^,**                           |      8 | 右     | 幂                                               |
| *,/                               |      7 | 左     | 乘，除                                           |
| +,-                               |      6 | 左     | 加，减                                           |
| :                                 |      5 | 右     | Cons, =1:2:[]= 相当于 =Cons(1,Cons(2, []))=      |
| ++                                |      5 | 右     | List 连接                                        |
| `elem`, `notElem`                 |      4 | 左     | 方法作为二元操作符时                             |
| ~==~, ~/=~, =<=, ~<=~, ~>=~ , =>= |      4 | 左     | 等不等大不大                                     |
| &&                                |      3 | 右     | 与                                               |
| \vert\vert                        |      2 | 右     | 或                                               |
| >>=, >>                           |      1 | 左     | Monadic Bind                                     |
| ~=<<~                             |      1 | 右     | 反向的 Monadic Bind                              |
| =$=                               |      0 | 右     | 强行改右结合                                     |


* 练习

1. 修改helloword成读两个参数，并打印
2. 把两个参数给的数字相加，输出结果
3. 使用 =getLine= 替换 =getArgs=, 这样可以根据用户输入来获取名字，并打印
